/*NOMBRE_ESTUDIANTE: JUAN ROJAS PARADA
NOMBRE_PROFESOR: CARLOS CASTRO BUSTAMANTE
FECHA: 09-07
NOMBRE_RAMO: MODELAMIENTO DE DATOS
SECCIÃ“N: 2
*/

CREATE TABLE JMRP_CLIENTES(
    COD_CLIENTE NUMBER,
    NOMBRE_CLIENTE VARCHAR2(50),
    APELLIDO1_CLIENTE VARCHAR2(50),
    APELLIDO2_CLIENTE VARCHAR2(50),
    EMAIL_CLIENTE VARCHAR2(30),

    CONSTRAINT PK_JMRP_CLIENTES PRIMARY KEY(COD_CLIENTE)
);

CREATE TABLE JMRP_PRODUCTOS(
    COD_PRODUCTO NUMBER,
    NOMBRE_PRODUCTO VARCHAR2,
    PRECIO_COMPRA NUMBER,
    PRECIO_VENTA NUMBER,
    CANTIDAD NUMBER,
    STOCK NUMBER,

    CONSTRAINT PK_JMRP_PRODUCTOS PRIMARY KEY(COD_PRODUCTO)
);

CREATE TABLE JMRP_LOG_VENTAS(
    COD_LOG NUMBER,
    INSTRUCCION VARCHAR2(50),
    DETALLE VARCHAR2(200),
    FECHAYHORA DATE,
    CONSTRAINT PK_JMRP_LOG_VENTAS PRIMARY KEY(COD_LOG)
);

CREATE TABLE JMRP_VENTAS(
    COD_VENTA NUMBER,
    FECHA_VENTA DATE,
    TOTAL_VENTA NUMBER,
    COD_CLIENTE NUMBER,

    CONSTRAINT PK_JMRP_VENTAS PRIMARY KEY(COD_VENTA),
    CONSTRAINT FK_JMRP_VENTAS_CLIENTES FOREIGN KEY(COD_CLIENTE) REFERENCES JMRP_CLIENTES(COD_CLIENTE)
);

CREATE TABLE JMRP_DETALLE_VENTAS(
    COD_VENTA NUMBER,
    COD_PRODUCTO NUMBER,
    CANTIDAD NUMBER,
    VALOR_TOTAL NUMBER,

    CONSTRAINT PK_JMRP_DETALLE_VENTAS PRIMARY KEY(COD_VENTA,COD_PRODUCTO),
    CONSTRAINT FK_JMRP_DETALLE_VENTAS_VENTA FOREIGN KEY(COD_VENTA) REFERENCES JMRP_VENTAS(COD_VENTA)
    CONSTRAINT FK_JMRP_DETALLE_VENTAS_PRODUCTOS FOREIGN KEY(COD_PRODUCTO) REFERENCES JMRP_PRODUCTOS(COD_PRODUCTO)
);
-- REQUERIMIENTO 1
CREATE OR REPLACE TRIGGER JMRP_GENERA_PK_PRODUCTO
BEFORE INSERT
ON JMRP_PRODUCTOS
FOR EACH ROW
BEGIN
    SELECT MAX(COD_CLIENTE) + 1 INTO :NEW.COD_CLIENTE
    FROM JMRP_CLIENTES;
    IF(COD_CLIENTE IS NULL) THEN
        :NEW.COD_CLIENTE := 1;
    END IF;
END;

CREATE OR REPLACE TRIGGER JMRP_GENERA_PK_LOG_VENTAS
BEFORE INSERT
ON JMRP_LOG_VENTAS
FOR EACH ROW
BEGIN
    SELECT MAX(COD_LOG) + 1 INTO :NEW.COD_LOG
    FROM JMRP_LOG_VENTAS;
    IF(COD_LOG IS NULL) THEN
        :NEW.COD_LOG := 1;
    END IF;
END;

-- REQUERIMIENTO 2
CREATE OR REPLACE TRIGGER JMRP_MAYU_TEXT_PROD
BEFORE UPDATE
ON JMRP_PRODUCTOS
FOR EACH ROW
BEGIN
    :OLD.NOMBRE_PRODUCTO := UPPER(:NEW.NOMBRE_PRODUCTO);
    :OLD.PRECIO_COMPRA := UPPER(:NEW.PRECIO_COMPRA);
    :OLD.PRECIO_VENTA := UPPER(:NEW.PRECIO_VENTA);
    :OLD.CANTIDAD := UPPER(:NEW.CANTIDAD);
    :OLD.STOCK := UPPER(:NEW.STOCK);
END;

CREATE OR REPLACE TRIGGER JMRP_MAYU_TEXT_LOG
BEFORE UPDATE
ON JMRP_LOG_VENTAS
FOR EACH ROW
BEGIN
    :OLD.INSTRUCCION := UPPER(:NEW.INSTRUCCION); 
    :OLD.DETALLE := UPPER(:NEW.DETALLE);
END;

-- REQUERIMIENTO 3
CREATE OR REPLACE TRIGGER JMRP_SAPO
BEFORE UPDATE
ON JMRP_LOG_VENTAS
FOR EACH ROW
BEGIN
    IF(:NEW.PRECIO_COMPRA <> :OLD.PRECIO_COMPRA) THEN
        INSERT INTO JMRP_LOG_VENTAS(INSTRUCCION, DETALLE, FECHAYHORA)
        VALUES('EL ANTIGO PRECIO DE COMPRA: '|| :OLD.PRECIO_COMPRA ||' ES AHORA: '|| :NEW.PRECIO_COMPRA);
    END IF;

    IF(:NEW.PRECIO_VENTA <> :OLD.PRECIO_VENTA) THEN
        INSERT INTO JMRP_LOG_VENTAS(INSTRUCCION, DETALLE, FECHAYHORA)
        VALUES('EL ANTIGO PRECIO DE VENTA: '|| :OLD.PRECIO_VENTA ||' ES AHORA: '|| :NEW.PRECIO_VENTA);
    END IF;
END;

-- REQUERIMIENTO 4

CREATE OR REPLACE FUNCTION JMRP_ACTUALIZA_STOCK(
    CANTIDAD_INGRESA NUMBER,
    CANTIDAD_SALE NUMBER,
    COD_PRODUCTO_F NUMBER
)
RETURN NUMBER
IS
    FINAL_STOCK NUMBER;
BEGIN
    SELECT STOCK + CANTIDAD_INGRESA - CANTIDAD_SALE INTO FINAL_STOCK
    FROM JMRP_PRODUCTOS
    WHERE(COD_PRODUCTO = COD_PRODUCTO_F);
END;

-- REQUERIMIENTO 5

CREATE OR REPLACE PROCEDURE JMRP_RUD_PRODUCTO(
    OPCION VARCHAR2,
    COD_PRODUCTO_P NUMBER,
    NOMBRE_PRODUCTO_P VARCHAR2,
    PRECIO_COMPRA_P NUMBER,
    PRECIO_VENTA_P NUMBER,
    CANTIDAD_P NUMBER,
    STOCK_P NUMBER
)
IS
BEGIN
    IF(UPPER(OPCION) = 'R') THEN
        INSERT INTO JMRP_PRODUCTOS(COD_PRODUCTO, NOMBRE_PRODUCTO,PRECIO_COMPRA,PRECIO_VENTA,CANTIDAD,STOCK)
        VALUES(COD_PRODUCTO_P,NOMBRE_PRODUCTO_P,PRECIO_COMPRA_P,PRECIO_VENTA_P,CANTIDAD_P,STOCK_P);
    END IF;

    IF(UPPER(OPCION) = 'U') THEN
        UPDATE JMRP_PRODUCTOS
        SET PRECIO_COMPRA := PRECIO_COMPRA_P,
        PRECIO_VENTA := PRECIO_VENTA_P,
        STOCK := STOCK_P
        WHERE(COD_PRODUCTO = COD_PRODUCTO_P);
    END IF;

    IF(UPPER(OPCION) = 'D') THEN
        DELETE FROM JMRP_PRODUCTOS
        WHERE (COD_PRODUCTO = COD_PRODUCTO_P);
    END IF;
END;

-- REQUERIMIENTO 6
CREATE OR REPLACE PROCEDURE JMRP_I_LOG_VENTA(
    COD_LOG_P NUMBER,
    INSTRUCCION_P VARCHAR2(50),
    DETALLE_P VARCHAR2(200),
    FECHAYHORA_P DATE,
)
IS
BEGIN
    INSERT INTO JMRP_LOG_VENTAS(COD_LOG,INSTRUCCION,DETALLE,FECHAYHORA_P)
    VALUES COD_LOG_P, INSTRUCCION_P, DETALLE_P , SYSDATE;
END;

CREATE SEQUENCE JMRP_PK_LOG_VENTAS
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 90000
	CACHE 100
	NOCYCLE;