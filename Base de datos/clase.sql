CREATE TABLE JMRP_USUARIO(
    COD_USUARIO NUMBER,
    NOMBRE_USUARIO VARCHAR2(25),
    APELLIDO1_USUARIO VARCHAR2(25),
    APELLIDO2_USUARIO VARCHAR2(25),
    CONSTRAINT PK_JMRP_USUARIO PRIMARY KEY(COD_USUARIO)
);

--ESTRUCTURA DE UN PA
CREATE OR REPLACE PROCEDURE JMRP_CARGA_USUARIOS(
    --PARAMETROS QUE RECIBIRA EL PROCEDIMIENTO SEPARADO POR COMAS
    COD_USUARIO_P NUMBER,
    NOMBRE_USUARIO_P VARCHAR2,
    APELLIDO1_USUARIO_P VARCHAR2,
    APELLIDO2_USUARIO_P VARCHAR2
)
IS
-- SI REQUIRE VARIABLES LOCALES, VAN ACÁ, SI NO, SE OBVIA
BEGIN
    -- CUERPO DEL PROCEDIMIENTO (ACCIONES)
    INSERT INTO JMRP_USUARIO(COD_USUARIO, NOMBRE_USUARIO, APELLIDO1_USUARIO, APELLIDO2_USUARIO)
    VALUES(COD_USUARIO_P, NOMBRE_USUARIO_P, APELLIDO1_USUARIO_P, APELLIDO2_USUARIO_P);
END;

BEGIN
    JMRP_CARGA_USUARIOS(1,'JUAN','ROJAS','PARADA');
    JMRP_CARGA_USUARIOS(2,'MACARENA','URBINA','FIGUEROA');
    JMRP_CARGA_USUARIOS(3,'MARCELA','PEREZ','BASTIAS');
END;

SELECT *
FROM JMRP_USUARIO;


-- TAREA 1 PROCEDIMIENTOS


--ESTRUCTURA DE UN PA
CREATE OR REPLACE PROCEDURE JMRP_ELIMINA_USUARIOS(
    --PARAMETROS QUE RECIBIRA EL PROCEDIMIENTO SEPARADO POR COMAS
    COD_USUARIO_P NUMBER
)
IS
-- SI REQUIRE VARIABLES LOCALES, VAN ACÁ, SI NO, SE OBVIA
BEGIN
    -- CUERPO DEL PROCEDIMIENTO (ACCIONES)
    DELETE FROM JMRP_USUARIO
    WHERE(COD_USUARIO = COD_USUARIO_P);
END;

BEGIN
    JMRP_ELIMINA_USUARIOS(1);
END;

SELECT *
FROM JMRP_USUARIO;

-- TAREA 2 PROCEDIMIENTOS


SELECT *
FROM JMRP_USUARIO;

--ESTRUCTURA DE UN PA
CREATE OR REPLACE PROCEDURE JMRP_MODIFICA_USUARIOS(
    --PARAMETROS QUE RECIBIRA EL PROCEDIMIENTO SEPARADO POR COMAS
    COD_USUARIO_P NUMBER,
    NOMBRE_USUARIO_P VARCHAR2,
    APELLIDO1_USUARIO_P VARCHAR2,
    APELLIDO2_USUARIO_P VARCHAR2
)
IS
-- SI REQUIRE VARIABLES LOCALES, VAN ACÁ, SI NO, SE OBVIA
BEGIN
    -- CUERPO DEL PROCEDIMIENTO (ACCIONES)
    UPDATE JMRP_USUARIO SET
    NOMBRE_USUARIO = NOMBRE_USUARIO_P,
    APELLIDO1_USUARIO = APELLIDO1_USUARIO_P,
    APELLIDO2_USUARIO = APELLIDO2_USUARIO_P
    WHERE(COD_USUARIO = COD_USUARIO_P);
END;

BEGIN
    JMRP_MODIFICA_USUARIOS(1,'EDUARDO','CARRANZA','ROJAS');
END;

SELECT *
FROM JMRP_USUARIO;

-- TAREA 3

create or replace PROCEDURE JMRP_IUD_USUARIOS(
    --PARAMETROS QUE RECIBIRA EL PROCEDIMIENTO SEPARADO POR COMAS
    OPCION VARCHAR2,
    COD_USUARIO_P NUMBER,
    NOMBRE_USUARIO_P VARCHAR2,
    APELLIDO1_USUARIO_P VARCHAR2,
    APELLIDO2_USUARIO_P VARCHAR2
)
IS
-- SI REQUIRE VARIABLES LOCALES, VAN ACÁ, SI NO, SE OBVIA
BEGIN
    LOCK TABLE JMRP_USUARIO IN ROW EXCLUSIVE MODE;
    -- CUERPO DEL PROCEDIMIENTO (ACCIONES)
    IF(UPPER(OPCION) = 'I') THEN
        
        INSERT INTO JMRP_USUARIO(COD_USUARIO, NOMBRE_USUARIO, APELLIDO1_USUARIO, APELLIDO2_USUARIO)
        VALUES(COD_USUARIO_P, NOMBRE_USUARIO_P, APELLIDO1_USUARIO_P, APELLIDO2_USUARIO_P);

    ELSIF(UPPER(OPCION) = 'U') THEN

        UPDATE JMRP_USUARIO SET
        NOMBRE_USUARIO = NOMBRE_USUARIO_P,
        APELLIDO1_USUARIO = APELLIDO1_USUARIO_P,
        APELLIDO2_USUARIO = APELLIDO2_USUARIO_P
        WHERE(COD_USUARIO = COD_USUARIO_P);

    ELSIF(UPPER(OPCION) = 'D') THEN

        DELETE FROM JMRP_USUARIO
        WHERE(COD_USUARIO = COD_USUARIO_P);
    END IF;

    COMMIT;
        EXCEPTION
            WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'Se acabó la memoria, o es corrupta');
            WHEN PROGRAM_ERROR THEN
			RAISE_APPLICATION_ERROR(-6501,'Error en la transacción, no se guardaron cambios');
            WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR(-1, 'El programa intentó insertar valores duplicados en una columna que está restringida por un índice único');
            WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'Ocurrió un problema inesperado');
        ROLLBACK;
END;



BEGIN
    JMRP_IUD_USUARIOS('i',4, 'PABLO', 'ROMERO', 'CASTRO');
END;

BEGIN
    JMRP_IUD_USUARIOS('d',4,'PABLO', 'ROMERO', 'CASTRO');
END;

BEGIN
    JMRP_IUD_USUARIOS('u',4,'PEDRO', 'ROMERO', 'CASTRO');
END;


-- PRIMER DESAFIO =/
-- SE REQUIERE MODIFICAR LA TABLA USUARIO A TRAVÉS DE CÓDIGO CON LA 
-- INSTRUCCIÓN ALTER TABLE, AGREGANDO UN CAMPO NUEVO QUE SERÁ EMAIL 
-- DE TIPO VARCHAR2 DE LARGO 50.

ALTER TABLE JMRP_USUARIO
    ADD EMAIL VARCHAR2(50);

-- LUEGO CREARÁ UNA FUNCIÓN QUE SE ENCARGUE DE GENERAR LOS CORREOS 
-- ELECTRÓNICOS DE LA SIGUIENTE FORMA: PRIMERA Y SEGUNDA LETRA DEL 
-- NOMBRE, TERCERA Y CUARTA LETRA DEL PRIMER APELLIDO, SEGUIDO DE UN 
-- PUNTO Y EL SEGUNDO APELLIDO COMPLETO QUE TERMINE EN @TESTSQL.CL 

CREATE OR REPLACE FUNCTION JMRP_GENERA_CORREO(
    NOMBRE_USUARIO_F VARCHAR2,
    APELLIDO1_USUARIO_F VARCHAR2,
    APELLIDO2_USUARIO_F VARCHAR2
)
    RETURN VARCHAR2
IS
    EMAIL VARCHAR2(50);
BEGIN
    EMAIL := UPPER(CONCAT(SUBSTR(NOMBRE_USUARIO_F,1,2),CONCAT(SUBSTR(APELLIDO1_USUARIO_F,3,2),CONCAT('.',CONCAT(APELLIDO2_USUARIO_F,'@TESTSQL.CL')))));
    RETURN EMAIL;
END;

-- MODIFICAR SU PROCEDIMIENTO ALMACENADO DE CARGA DE DATOS, 
-- INCORPORANDO DENTRO DE LA CARGA DE DATOS EL CORREO 
-- LUEGO REALIZAR UN DELETE FROM A LA TABLA SIN 
-- RESTRICCIONES LIMPIARLA Y LUEGO UN LLAMADO AL PROCEDIMIENTO 
-- ALMACENADO PARA LA CARGA DE UN REGISTRO DONDE SE UTILICE LA 
-- FUNCIÓN.

CREATE SEQUENCE JMRP_PK_USUARIO
	START WITH 1
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 5
	NOCYCLE;



CREATE OR REPLACE PROCEDURE JMRP_CARGA_USUARIOS(
    --PARAMETROS QUE RECIBIRA EL PROCEDIMIENTO SEPARADO POR COMAS
    NOMBRE_USUARIO_P VARCHAR2,
    APELLIDO1_USUARIO_P VARCHAR2,
    APELLIDO2_USUARIO_P VARCHAR2
)
IS
-- SI REQUIRE VARIABLES LOCALES, VAN ACÁ, SI NO, SE OBVIA
BEGIN
    LOCK TABLE JMRP_USUARIO IN ROW EXCLUSIVE MODE;
    -- CUERPO DEL PROCEDIMIENTO (ACCIONES)
    INSERT INTO JMRP_USUARIO(COD_USUARIO, NOMBRE_USUARIO, APELLIDO1_USUARIO, APELLIDO2_USUARIO,EMAIL)
    VALUES(JMRP_PK_USUARIO.NEXTVAL,NOMBRE_USUARIO_P,APELLIDO1_USUARIO_P,APELLIDO2_USUARIO_P,JMRP_GENERA_CORREO(NOMBRE_USUARIO_P,APELLIDO1_USUARIO_P,APELLIDO2_USUARIO_P));

        COMMIT;
        EXCEPTION
            WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'Se acabó la memoria, o es corrupta');
            WHEN PROGRAM_ERROR THEN
			RAISE_APPLICATION_ERROR(-6501,'Error en la transacción, no se guardaron cambios');
            WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR(-1, 'El programa intentó insertar valores duplicados en una columna que está restringida por un índice único');
            WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'Ocurrió un problema inesperado');
        ROLLBACK;
END;

SELECT *
FROM JMRP_USUARIO;

DELETE FROM JMRP_USUARIO;


BEGIN
    JMRP_CARGA_USUARIOS('Juan','Perez','Soto');
END;


SELECT *
FROM JMRP_USUARIO;

--- SEGUNDO DESAFÍO =)
-- CREAR UNA FUNCIÓN QUE SE ENCARGUE DE REALIZAR LA CARGA DE REGISTROS 
-- PARA LAS CLAVES PRIMARIAS DE CARACTER AUTOINCREMENTAL.
CREATE OR REPLACE FUNCTION JMRP_CARGA_REGISTROS(
)
    RETURN NUMBER
IS
    CLAVE NUMBER :=0;
BEGIN
    SELECT MAX(COD_USUARIO)+1 INTO CLAVE
    FROM JMRP_USUARIO;
    IF(CLAVE IS NULL) THEN
        CLAVE :=1;
    END IF;
    RETURN CLAVE;
END;
-- LUEGO MODIFICAR SU PROCEDIMIENTO ALMACENADO DE CARGA DE DATOS, 
-- INCORPORANDO DENTRO DE LA CARGA DE DATOS EL LLAMADO A LA 
-- FUNCIÓN QUE SE ENCARGUE DEL CAMPO PRIMARIO.
CREATE OR REPLACE PROCEDURE JMRP_CARGA_USUARIOS(
    --PARAMETROS QUE RECIBIRA EL PROCEDIMIENTO SEPARADO POR COMAS
    NOMBRE_USUARIO_P VARCHAR2,
    APELLIDO1_USUARIO_P VARCHAR2,
    APELLIDO2_USUARIO_P VARCHAR2
)
IS
-- SI REQUIRE VARIABLES LOCALES, VAN ACÁ, SI NO, SE OBVIA
BEGIN
    LOCK TABLE JMRP_USUARIO IN ROW EXCLUSIVE MODE;
    -- CUERPO DEL PROCEDIMIENTO (ACCIONES)
    INSERT INTO JMRP_USUARIO(COD_USUARIO, NOMBRE_USUARIO, APELLIDO1_USUARIO, APELLIDO2_USUARIO,EMAIL)
    VALUES(JMRP_CARGA_REGISTROS,NOMBRE_USUARIO_P,APELLIDO1_USUARIO_P,APELLIDO2_USUARIO_P,JMRP_GENERA_CORREO(NOMBRE_USUARIO_P,APELLIDO1_USUARIO_P,APELLIDO2_USUARIO_P));

        COMMIT;
        EXCEPTION
            WHEN STORAGE_ERROR THEN
            RAISE_APPLICATION_ERROR(-6500, 'Se acabó la memoria, o es corrupta');
            WHEN PROGRAM_ERROR THEN
			RAISE_APPLICATION_ERROR(-6501,'Error en la transacción, no se guardaron cambios');
            WHEN DUP_VAL_ON_INDEX THEN
            RAISE_APPLICATION_ERROR(-1, 'El programa intentó insertar valores duplicados en una columna que está restringida por un índice único');
            WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20010,'Ocurrió un problema inesperado');
        ROLLBACK;
END;

-- REALIZAR UN DELETE FROM A LA TABLA SIN RESTRICCIONES LIMPIARLA
-- Y LUEGO UN LLAMADO AL PROCEDIMIENTO ALMACENADO PARA LA CARGA 
-- DE 10 REGISTROS
BEGIN
    JMRP_CARGA_USUARIOS('JUAN','PEREZ','SOTO');
    JMRP_CARGA_USUARIOS('MARIA','LOPEZ','GARCIA');
    JMRP_CARGA_USUARIOS('CARLOS','ROJAS','RAMIREZ');
    JMRP_CARGA_USUARIOS('ANA','HERRERA','TORO');
    JMRP_CARGA_USUARIOS('PEDRO','MUNOZ','CASTILLO');
    JMRP_CARGA_USUARIOS('LUISA','GOMEZ','DIAZ');
    JMRP_CARGA_USUARIOS('ANDRES','FUENTES','NAVARRO');
    JMRP_CARGA_USUARIOS('SOFIA','TORRES','MORALES');
    JMRP_CARGA_USUARIOS('RICARDO','VERA','PARRA');
    JMRP_CARGA_USUARIOS('CAMILA','SALAZAR','REYES');
END;

SELECT * FROM JMRP_USUARIO;